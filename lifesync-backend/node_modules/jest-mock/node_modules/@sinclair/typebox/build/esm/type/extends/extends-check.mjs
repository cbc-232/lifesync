import { Any } from '../any/index.mjs';
import { Function as FunctionType } from '../function/index.mjs';
import { Number } from '../number/index.mjs';
import { String } from '../string/index.mjs';
import { Unknown } from '../unknown/index.mjs';
import { TemplateLiteralToUnion } from '../template-literal/index.mjs';
import { PatternNumberExact, PatternStringExact } from '../patterns/index.mjs';
import { Kind, Hint } from '../symbols/index.mjs';
import { TypeBoxError } from '../error/index.mjs';
import { TypeGuard, ValueGuard } from '../guard/index.mjs';
export class ExtendsResolverError extends TypeBoxError {
}
export var ExtendsResult;
(function (ExtendsResult) {
    ExtendsResult[ExtendsResult["Union"] = 0] = "Union";
    ExtendsResult[ExtendsResult["True"] = 1] = "True";
    ExtendsResult[ExtendsResult["False"] = 2] = "False";
})(ExtendsResult || (ExtendsResult = {}));
// ------------------------------------------------------------------
// IntoBooleanResult
// ------------------------------------------------------------------
// prettier-ignore
function IntoBooleanResult(result) {
    return result === ExtendsResult.False ? result : ExtendsResult.True;
}
// ------------------------------------------------------------------
// Throw
// ------------------------------------------------------------------
// prettier-ignore
function 